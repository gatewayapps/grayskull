type Setting {
	key: String!
	value: String!
	type: String!
}


type SettingMeta {
	count: Int!
}

input SettingFilter {
  or: [SettingFilter!]
  and: [SettingFilter!]
	key_contains: String
	key_notContains: String
	key_startsWith: String
	key_endsWith: String
	key_equals: String
	key_notEquals: String
	value_contains: String
	value_notContains: String
	value_startsWith: String
	value_endsWith: String
	value_equals: String
	value_notEquals: String
	type_contains: String
	type_notContains: String
	type_startsWith: String
	type_endsWith: String
	type_equals: String
	type_notEquals: String
}

input SettingUniqueFilter {
	key: String
}

type Query {
	settings(offset: Int, limit: Int, filter: SettingFilter): [Setting!]! 
	settingsMeta(filter: SettingFilter): SettingMeta 
	setting(where: SettingUniqueFilter): Setting 
}