type UserAccount {
	userAccountId: ID!
	firstName: String!
	lastName: String!
	lastActive: Date!
	lastPasswordChange: Date!
	phoneNumber: String!
	profileImageUrl: String!
	permissions: Int!
	otpEnabled: Boolean!
	isActive: Boolean!
	createdBy: ID
	createdAt: Date!
	updatedBy: ID
	updatedAt: Date!
	deletedBy: ID
	deletedAt: Date
	emailAddresses: [EmailAddress]
}

input UpdateClientScopesArgs {
	client_id: String!
	allowedScopes: [String]
	deniedScopes: [String]
}

input GenerateMfaKeyArgs {
	emailAddress: String!
}

input VerifyMfaKeyArgs {
	secret: String!
	token: String!
}

input SendBackupCodeArgs {
	emailAddress: String!
}

input ResetPasswordArgs {
	emailAddress: String!
}

input ValidatePasswordArgs {
	password: String!
	confirm: String!
}

input ChangePasswordArgs {
	password: String!
	confirm: String!
	cpt: String!
}

input LoginArgs {
	emailAddress: String!
	password: String!
	otpToken: String
	fingerprint: String!
}

input AuthorizeClientArgs {
	client_id: String!
	responseType: String!
	redirectUri: String!
	scope: String
	state: String
}

input RegisterUserArgs {
	emailAddress: String!
	password: String!
	confirm: String!
	client_id: String
	firstName: String!
	lastName: String!
	otpSecret: String
}


type UserAccountMeta {
	count: Int!
}

input UserAccountFilter {
  or: [UserAccountFilter!]
  and: [UserAccountFilter!]
	userAccountId_in: [ID]
	userAccountId_equals: ID
	userAccountId_notEquals: ID
	firstName_contains: String
	firstName_notContains: String
	firstName_startsWith: String
	firstName_endsWith: String
	firstName_equals: String
	firstName_notEquals: String
	lastName_contains: String
	lastName_notContains: String
	lastName_startsWith: String
	lastName_endsWith: String
	lastName_equals: String
	lastName_notEquals: String
	lastActive_lessThan: Date
	lastActive_greaterThan: Date
	lastActive_equals: Date
	lastActive_notEquals: Date
	lastPasswordChange_lessThan: Date
	lastPasswordChange_greaterThan: Date
	lastPasswordChange_equals: Date
	lastPasswordChange_notEquals: Date
	phoneNumber_contains: String
	phoneNumber_notContains: String
	phoneNumber_startsWith: String
	phoneNumber_endsWith: String
	phoneNumber_equals: String
	phoneNumber_notEquals: String
	profileImageUrl_contains: String
	profileImageUrl_notContains: String
	profileImageUrl_startsWith: String
	profileImageUrl_endsWith: String
	profileImageUrl_equals: String
	profileImageUrl_notEquals: String
	permissions_lessThan: Int
	permissions_greaterThan: Int
	permissions_equals: Int
	permissions_notEquals: Int
	otpEnabled_equals: Boolean
	otpEnabled_notEquals: Boolean
	isActive_equals: Boolean
	isActive_notEquals: Boolean
	createdBy_in: [ID]
	createdBy_equals: ID
	createdBy_notEquals: ID
	createdAt_lessThan: Date
	createdAt_greaterThan: Date
	createdAt_equals: Date
	createdAt_notEquals: Date
	updatedBy_in: [ID]
	updatedBy_equals: ID
	updatedBy_notEquals: ID
	updatedAt_lessThan: Date
	updatedAt_greaterThan: Date
	updatedAt_equals: Date
	updatedAt_notEquals: Date
	deletedBy_in: [ID]
	deletedBy_equals: ID
	deletedBy_notEquals: ID
	deletedAt_lessThan: Date
	deletedAt_greaterThan: Date
	deletedAt_equals: Date
	deletedAt_notEquals: Date
	emailAddresses_equals: [ID]
	emailAddresses_notEquals: [ID]
	emailAddresses_contains: [ID]
}

input UserAccountUniqueFilter {
	userAccountId: ID
}

type Query {
	userAccounts(offset: Int, limit: Int, filter: UserAccountFilter): [UserAccount!]! 
	userAccountsMeta(filter: UserAccountFilter): UserAccountMeta 
	userAccount(where: UserAccountUniqueFilter): UserAccount 
}

type Mutation {
	updateClientScopes(data: UpdateClientScopesArgs!): Boolean 
	generateMfaKey(data: GenerateMfaKeyArgs!): String 
	verifyMfaKey(data: VerifyMfaKeyArgs!): Boolean 
	sendBackupCode(data: SendBackupCodeArgs!): Boolean 
	resetPassword(data: ResetPasswordArgs!): Boolean 
	validatePassword(data: ValidatePasswordArgs!): Boolean 
	changePassword(data: ChangePasswordArgs!): Boolean 
	login(data: LoginArgs!): LoginResponse 
	authorizeClient(data: AuthorizeClientArgs!): AuthorizeClientResponse 
	registerUser(data: RegisterUserArgs!): RegisterUserResponse 
}