import Promise from 'bluebird'
import db from '../../data'
import { I{{Name}} } from '../../data/models/I{{Name}}'
import { {{Name}}Instance } from '../../data/models/{{Name}}'

export default class {{Name}}ServiceBase {
    public create{{Name}}(data: I{{Name}}): Promise<{{Name}}Instance> {
      return db.{{Name}}.create(data, {returning: true, raw: true})
    }

    {{#each Properties as |prop|}}
      {{#if prop.IsPrimaryKey}}
    public delete{{../Name}}By{{prop.Name}}({{prop.Name}}: {{prop.TypeName}}): Promise<number> {
      return db.{{../Name}}.destroy({
        where: {
          {{prop.Name}}
        }
      })
    }

    public get{{../Name}}By{{prop.Name}}({{prop.Name}}: {{prop.TypeName}}): Promise<{{../Name}}Instance | null> {
      return db.{{../Name}}.findOne({
        where: {
          {{prop.Name}}
        },
        raw: true
      })
    }

     public update{{../Name}}By{{prop.Name}}(data: I{{../Name}}, {{prop.Name}}: {{prop.TypeName}}): Promise<{{../Name}}Instance | null> {
      return db.{{../Name}}.update(
        data, {
        where: {
          {{prop.Name}}
        },
        returning: true,
        plain: true,
        raw: true
      })
    }
      {{/if}}
    {{/each}}

}
