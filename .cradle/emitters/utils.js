const childProcess = require('child_process')
const _ = require('lodash')
const Path = require('path')
const pluralize = require('pluralize')

module.exports = {
  lintAndPretty(filePaths) {
    return
  },
  isFieldSensitive(model, fieldName) {
    if (!model.Meta || !model.Meta.sensitive) {
      return false
    }
    return model.Meta.sensitive.includes(fieldName)
  },
  registerHandleBarHelpers(registerHelper) {
    registerHelper('toCamelCase', (str) => {
      return _.camelCase(str)
    })

    registerHelper('pluralize', (str) => {
      return pluralize(str)
    })

    registerHelper('isAutogenerated', (args, options) => {
      if (!args) {
        return options.inverse(this)
      }

      return args.OriginalTypeName !== 'UniqueIdentifier' && args.Autogenerate ? options.fn(this) : options.inverse(this)
    })

    registerHelper('hasDefaultValue', (args, options) => {
      if (!args) {
        return options.inverse(this)
      }

      if (args.OriginalTypeName === 'UniqueIdentifier') {
        return args.Autogenerate === true ? options.fn(this) : options.inverse(this)
      }

      return args.DefaultValue !== undefined ? options.fn(this) : options.inverse(this)
    })

    registerHelper('isNotSensitive', (propName, meta, options) => {
      if (!meta || !Array.isArray(meta.sensitive)) {
        return options.fn(this)
      }
      return !meta.sensitive.includes(propName) ? options.fn(this) : options.inverse(this)
    })

    registerHelper('getUniqueValue', (val) => {
      if (typeof val === 'string') {
        return `'${val}'`
      } else {
        return val
      }
    })
  }
}
