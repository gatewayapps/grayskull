import { I{{Name}}Meta, I{{Name}}Filter, I{{Name}}UniqueFilter } from '../../interfaces/graphql/I{{Name}}'
import { convertFilterToSequelizeWhere } from '../../utils/graphQLSequelizeConverter'
import db from '../../data/context'
import { I{{Name}} } from '../../data/models/I{{Name}}'
{{!-- {{#ifNotEquals Name 'UserAccount'}}
import { IUserAccount } from '../../data/models/IUserAccount'
{{/ifNotEquals}} --}}

import { AnyWhereOptions } from 'sequelize'
import { IQueryOptions } from '../../data/IQueryOptions'

class {{Name}}Repository {
  public async {{toCamelCase (pluralize Name)}}Meta(filter: I{{Name}}Filter | null, options: IQueryOptions): Promise<I{{Name}}Meta> {
    const where = convertFilterToSequelizeWhere(filter)
    const count = await db.{{Name}}.count({ where, transaction: options.transaction })
    return {
      count
    }
  }

  public async get{{pluralize Name}}(filter: I{{Name}}Filter | null,  options: IQueryOptions): Promise<I{{Name}}[]> {
    const where = convertFilterToSequelizeWhere(filter)
    const results = await db.{{Name}}.findAll({
      where,
      {{#if Meta.sensitive}}
      attributes: {
        exclude: [{{#each Meta.sensitive as |s|}}'{{s}}',{{/each}}],
      },
      {{/if}}
      include: options.include,
      order: options.order,
      limit: options.limit,
      offset: options.offset,
      
      transaction: options.transaction,
    })
    return results.map((r)=>r.toJSON())
  }

  {{#if Meta.sensitive}}
  public async get{{pluralize Name}}WithSensitiveData(filter: I{{Name}}Filter | null, options: IQueryOptions): Promise<I{{Name}}[]> {
    const where = convertFilterToSequelizeWhere(filter)
    const results = await db.{{Name}}.findAll({
      where,
      
      transaction: options.transaction,
    })

        return results.map((r)=>r.toJSON())
  }
  {{/if}}

  public async get{{Name}}(filter: I{{Name}}UniqueFilter, options: IQueryOptions): Promise<I{{Name}} | null> {
    const result = await db.{{Name}}.findOne({
      where: filter,
      {{#if Meta.sensitive}}
      attributes: {
        exclude: [{{#each Meta.sensitive as |s|}}'{{s}}',{{/each}}],
      },
      {{/if}}
      
      transaction: options.transaction,
    })
    if(result){
      return result.toJSON()
    } else {
      return null
    }
  }

  {{#if Meta.sensitive}}
  public async get{{Name}}WithSensitiveData(filter: I{{Name}}UniqueFilter, options: IQueryOptions): Promise<I{{Name}} | null> {
    const result = await db.{{Name}}.findOne({
      where: filter,
      
      transaction: options.transaction,
    })

        if(result){
      return result.toJSON()
    } else {
      return null
    }
  }
  {{/if}}

  public async create{{Name}}(data: I{{Name}}, options: IQueryOptions): Promise<I{{Name}}> {
    if (options.userContext) {
      data.createdBy = options.userContext.userAccountId
      data.updatedBy = options.userContext.userAccountId
    }
    return await db.{{Name}}.create(data, {returning: true,  transaction: options.transaction})
  }

  public async delete{{Name}}(filter: I{{Name}}UniqueFilter, options: IQueryOptions): Promise<boolean> {
    {{#if Meta.destroy}}
    const affectedCount = await db.Session.destroy({
      where: filter as AnyWhereOptions,
      transaction: options.transaction,
    })
    {{else}}
    const data: Partial<I{{Name}}> = {
      deletedAt: new Date()
    }
    if (options.userContext) {
      data.deletedBy = options.userContext.userAccountId
    }
    const [ affectedCount ] = await db.{{Name}}.update(data, {
      where: filter as AnyWhereOptions,
      transaction: options.transaction,
    })
    {{/if}}
    return affectedCount > 0
  }

  public async update{{Name}}(filter: I{{Name}}UniqueFilter, data: Partial<I{{Name}}>, options: IQueryOptions): Promise<I{{Name}} | null> {
    if (options.userContext) {
      data.updatedBy = options.userContext.userAccountId
    }
    await db.{{Name}}.update(data, {
      where: filter as AnyWhereOptions,
      returning: true,
      transaction: options.transaction,
    })
    return await this.get{{Name}}(filter, options)
  }
}

export default new {{Name}}Repository()
